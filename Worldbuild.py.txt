#!/usr/bin/env python3
"""
Cosmic Key Full System - Fully Orchestrated, Self-Healing, Multi-Branch, Procedural Universe & Media Generation
"""
from __future__ import annotations
import os
import sys
import json
import shutil
import subprocess
import platform
import pathlib
import logging
import threading
import time
import random
import openai
import tkinter as tk
from tkinter import ttk, messagebox

# ---------------- Config ----------------
HOME = pathlib.Path.home()
VC_DIR = HOME / "VultureCode"
LOG_FILE = VC_DIR / "vulture_full_system.log"
COSMIC_KEY_FILE = VC_DIR / "cosmic_key.json"
MIN_PY = (3, 8)

# ---------------- Logging ----------------
def ensure_dir(p: pathlib.Path):
    p.mkdir(parents=True, exist_ok=True)

def setup_logging():
    ensure_dir(VC_DIR)
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s",
                        handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler(sys.stdout)])

# ---------------- System Utilities ----------------
def run(cmd: list, check=False, capture=False):
    logging.info("RUN: %s", " ".join(cmd))
    try:
        if capture:
            r = subprocess.run(cmd, check=check, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
            logging.info(r.stdout or "")
            return r
        else:
            subprocess.run(cmd, check=check)
    except Exception as e:
        logging.error("Command failed: %s -> %s", cmd, e)
        return None

# ---------------- Cosmic Key Utilities ----------------
def load_cosmic() -> dict:
    try:
        with open(COSMIC_KEY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error("Failed to load Cosmic Key: %s", e)
        return {}

def save_cosmic(data: dict):
    try:
        with open(COSMIC_KEY_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4)
    except Exception as e:
        logging.error("Failed to save Cosmic Key: %s", e)

def generate_images_from_cosmic():
    cosmic_data = load_cosmic()
    if not cosmic_data:
        logging.error("No Cosmic Key data found.")
        return

    openai.api_key = cosmic_data.get("openai_api_key", "")
    if not openai.api_key:
        logging.error("OpenAI API key not found in Cosmic Key.")
        return

    for entry in cosmic_data.get("entries", []):
        prompt = entry.get("prompt", "")
        if prompt:
            try:
                response = openai.Image.create(
                    prompt=prompt,
                    n=1,
                    size="1024x1024"
                )
                image_url = response['data'][0]['url']
                logging.info("Generated image for '%s': %s", entry.get("name", "Unnamed"), image_url)
            except Exception as e:
                logging.error("Failed to generate image for '%s': %s", entry.get("name", "Unnamed"), e)

# ---------------- GUI ----------------
def show_gui():
    root = tk.Tk()
    root.title("Cosmic Key Image Generator")

    def on_generate():
        threading.Thread(target=generate_images_from_cosmic, daemon=True).start()
        messagebox.showinfo("Info", "Image generation started. Check logs for details.")

    ttk.Button(root, text="Generate Images", command=on_generate).pack(padx=20, pady=20)
    root.mainloop()

# ---------------- Main ----------------
if __name__ == "__main__":
    setup_logging()
    logging.info("Starting Cosmic Key Full System...")

    if sys.version_info < MIN_PY:
        logging.error("Python %d.%d or higher is required.", MIN_PY[0], MIN_PY[1])
        sys.exit(1)

    show_gui()